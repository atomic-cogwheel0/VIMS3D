; CASIO OS syscalls for important functions
; big thanks to Simon Lothar (SimLo) for the docs
; https://web.archive.org/web/20230315143257/https://bible.planet-casio.com/simlo/chm/v20/fx_legacy_syscalls.htm

; THIS FILE IS MOST LIKELY NOT THE CAUSE OF ANY OF THE MANY PROBLEMS
; DO NOT EDIT LEST TERRIBLE SYSTEM ERRORS BEFALL THEE

	.EXPORT _RTC_GetTicks, _Bdisp_SYS_FastDrawLineVRAM, _Keyboard_ClrBuffer, _GetVRAMAddress, _SetPoint_VRAM

	.SECTION P,CODE,ALIGN=4

; returns 1/128 second ticks since midnight according to the CPU's RTC
_RTC_GetTicks:
	mov.l #H'80010070, r1 ; load syscall jumptable function
	mov.w #H'003b, r0     ; syscall 03Bh: uint32_t RTC_GetTicks(void)
	jmp @r1               ; do the jump
	nop                   ; delayed jump instruction slot

; draws a line to VRAM, faster than the library one
_Bdisp_SYS_FastDrawLineVRAM:
	mov.l #H'80010070, r1
	mov.w #H'0764, r0     ; syscall 764h: void Bdisp_FastDrawLineVRAM(int x1, int y1, int x2, int y2)
	jmp @r1
	nop

_GetVRAMAddress:
	mov.l #H'80010070, r1
	mov.w #H'0135, r0     ; syscall 135h: void *GetVRAMAddress(void)
	jmp @r1
	nop

; clears the keyboard input buffer
_Keyboard_ClrBuffer:
	mov.l #H'80010070, r1
	mov.w #H'0241, r0     ; syscall 764h: void Bdisp_FastDrawLineVRAM(int x1, int y1, int x2, int y2)
	jmp @r1
	nop

; void SetPoint_VRAM(int x, int y, int color, void *vram);
_SetPoint_VRAM:
	; coord = y*128 + x
	shll8 r5
	shlr r5
	add r4, r5
	; boffset = coord / 8
	mov.l r5, r0
	shlr2 r5
	shlr r5
	; mask = 1000'0000b >> (coord % 8)
	and #7, r0
	neg r0, r4
	extu.w r5, r0 ; setup for later use
	mov.b #128, r3 ; 1000'0000b
	extu.b r3, r3
	shld r4, r3

	; set the pixel
	tst r6, r6
	bt/s empty
	mov.b @(r0, r7), r1
	; vram[boffset] |= mask
	or r3, r1
	rts
	mov.b r1, @(r0, r7)
empty:
	; vram[boffset] &= ~mask
	not r3, r3
	and r3, r1
	rts
	mov.b r1, @(r0, r7)

	.END